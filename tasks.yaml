# Copyright 2024 Defense Unicorns
# SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial

includes:
  - test: tasks/tests.yaml
  - schema: tasks/schema.yaml
  - docs: tasks/docs.yaml
  - dev: tasks/dev.yaml
  - lint: ./tasks/lint.yaml

tasks:
  # build tasks
  - name: get-versions
    description: gets versions of UDS CLI + vendored tools
    actions:
      - cmd: go list -f '{{.Version}}' -m github.com/derailed/k9s
        mute: true
        setVariables:
          - name: K9S_VERSION
      - cmd: go list -f '{{.Version}}' -m github.com/anchore/syft
        mute: true
        setVariables:
          - name: SYFT_VERSION
      - cmd: go list -f '{{.Version}}' -m github.com/google/go-containerregistry
        mute: true
        setVariables:
          - name: CRANE_VERSION
      - cmd: go list -f '{{.Version}}' -m github.com/mholt/archiver/v3
        mute: true
        setVariables:
          - name: ARCHIVER_VERSION
      - cmd: go list -f '{{.Version}}' -m helm.sh/helm/v3
        mute: true
        setVariables:
          - name: HELM_VERSION
      - cmd: git describe --tags 2>/dev/null || echo "UnknownVersion"
        mute: true
        setVariables:
          - name: CLI_VERSION
      - cmd: go list -f '{{.Version}}' -m k8s.io/client-go | sed 's/^v//' | tr '.' ' '
        mute: true
        setVariables:
          - name: K8S_MODULES_VER
      - cmd: echo ${K8S_MODULES_VER} | awk '{print $$1 + 1}'
        mute: true
        setVariables:
          - name: K8S_MODULES_MAJOR_VER
      - cmd: echo ${K8S_MODULES_VER} | awk '{print substr($0, 3, 2)}'
        mute: true
        setVariables:
          - name: K8S_MODULES_MINOR_VER

  - name: build-args
    description: generates the build args for building UDS CLI
    actions:
      - cmd: |
          cat <<EOF
          -s -w -X 'github.com/defenseunicorns/uds-cli/src/config.CLIVersion=${CLI_VERSION}' \
            -X 'helm.sh/helm/v3/pkg/lint/rules.k8sVersionMajor=${K8S_MODULES_MAJOR_VER}' \
            -X 'helm.sh/helm/v3/pkg/lint/rules.k8sVersionMinor=${K8S_MODULES_MINOR_VER}' \
            -X 'helm.sh/helm/v3/pkg/chartutil.k8sVersionMajor=${K8S_MODULES_MAJOR_VER}' \
            -X 'helm.sh/helm/v3/pkg/chartutil.k8sVersionMinor=${K8S_MODULES_MINOR_VER}' \
            -X 'github.com/zarf-dev/zarf/src/config.ActionsCommandZarfPrefix=zarf' \
            -X 'github.com/derailed/k9s/cmd.version=${K9S_VERSION}' \
            -X 'github.com/google/go-containerregistry/cmd/crane/cmd.Version=${CRANE_VERSION}' \
            -X 'github.com/zarf-dev/zarf/src/cmd/tools.syftVersion=${SYFT_VERSION}' \
            -X 'github.com/zarf-dev/zarf/src/cmd/tools.archiverVersion=${ARCHIVER_VERSION}' \
            -X 'github.com/zarf-dev/zarf/src/cmd/tools.helmVersion=${HELM_VERSION}'
          EOF
        setVariables:
          - name: BUILD_ARGS

  - name: download-tofu-mac-intel
    description: download tofu for go:embed
    actions:
      - cmd: mkdir -p src/cmd/bin
      - cmd: rm -f src/cmd/bin/tofu
      - cmd: wget https://github.com/opentofu/opentofu/releases/download/v1.9.0/tofu_1.9.0_darwin_amd64.zip -O src/cmd/bin/tofu_1.9.0_darwin_amd64.zip
      - cmd: unzip -p src/cmd/bin/tofu_1.9.0_darwin_amd64.zip tofu > src/cmd/bin/tofu
      - cmd: rm src/cmd/bin/tofu_1.9.0_darwin_amd64.zip

  - name: download-tofu-mac-apple
    description: download tofu for go:embed
    actions:
      - cmd: mkdir -p src/cmd/bin
      - cmd: rm -f src/cmd/bin/tofu
      - cmd: wget https://github.com/opentofu/opentofu/releases/download/v1.9.0/tofu_1.9.0_darwin_arm64.zip -O src/cmd/bin/tofu_1.9.0_darwin_arm64.zip
      - cmd: unzip -p src/cmd/bin/tofu_1.9.0_darwin_arm64.zip tofu > src/cmd/bin/tofu
      - cmd: rm src/cmd/bin/tofu_1.9.0_darwin_arm64.zip

  - name: download-tofu-linux-arm
    description: download tofu for go:embed
    actions:
      - cmd: mkdir -p src/cmd/bin
      - cmd: rm -f src/cmd/bin/tofu
      - cmd: wget https://github.com/opentofu/opentofu/releases/download/v1.9.0/tofu_1.9.0_linux_arm64.zip -O src/cmd/bin/tofu_1.9.0_linux_arm64.zip
      - cmd: unzip -p src/cmd/bin/tofu_1.9.0_linux_arm64.zip tofu > src/cmd/bin/tofu
      - cmd: rm src/cmd/bin/tofu_1.9.0_linux_arm64.zip

  - name: download-tofu-linux-amd
    description: download tofu for go:embed
    actions:
      - cmd: mkdir -p src/cmd/bin
      - cmd: rm -f src/cmd/bin/tofu
      - cmd: wget https://github.com/opentofu/opentofu/releases/download/v1.9.0/tofu_1.9.0_linux_amd64.zip -O src/cmd/bin/tofu_1.9.0_linux_amd64.zip
      - cmd: unzip -p src/cmd/bin/tofu_1.9.0_linux_amd64.zip tofu > src/cmd/bin/tofu
      - cmd: rm src/cmd/bin/tofu_1.9.0_linux_amd64.zip

  - name: build-all
    description: build all the CLI binaries and gen checksums
    actions:
      - task: build-cli-linux-amd
      - task: build-cli-linux-arm
      - task: build-cli-mac-intel
      - task: build-cli-mac-apple
      - cmd: sha256sum build/* > build/checksums.txt

  - name: build-cli-linux-amd
    description: build the CLI for Linux AMD64
    actions:
      - task: get-versions
      - task: build-args
      - task: download-tofu-linux-amd
      - cmd: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="${BUILD_ARGS}" -o build/uds main.go

  - name: build-cli-linux-arm
    description: build the CLI for Linux ARM64
    actions:
      - task: get-versions
      - task: build-args
      - task: download-tofu-linux-arm
      - cmd: CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags="${BUILD_ARGS}" -o build/uds-arm main.go

  - name: build-cli-mac-intel
    description: build the CLI for Mac Intel
    actions:
      - task: get-versions
      - task: build-args
      - task: download-tofu-mac-intel
      - cmd: GOOS=darwin GOARCH=amd64 go build -ldflags="${BUILD_ARGS}" -o build/uds-mac-intel main.go

  - name: build-cli-mac-apple
    description: build the CLI for Mac Apple
    actions:
      - task: get-versions
      - task: build-args
      - task: download-tofu-mac-apple
      - cmd: GOOS=darwin GOARCH=arm64 go build -ldflags="${BUILD_ARGS}" -o build/uds-mac-apple main.go
