# 1. Bundle Schema Tooling

Date: 6 June 2024

## Status

IN PROGRESS

## Context

Need to determine how we want UDS Engine to be installed in a cluster

## Alternatives

### 1. Package as part of UDS Core
Wrap UDS Engine in a Zarf package with a Helm chart and deploy as part of UDS Core

 <b>Pros:</b>
 - Engine gets installed as a part of core
 - Initial Engine capability has dependency on Pepr which gets installed as a part of core

 <b>Cons:</b>
 - Core brings in other capabilities that might not be wanted or needed

### 2. UDS command
Have a UDS command that "bootstraps" a cluster with Engine just like how Zarf does with Zarf init

<b>Pros:</b>
- Quick and light-weight, allows you to only install Engine in the cluster
- Convenient for quick dev work cycles

<b>Cons:</b>
- Will have to manually install/deploy any other dependencies
- Potential for maintaining a uds-cli command that rarely gets used, once its run and the UDS Engine is installed

### 3. UDS Core and Dev
Add UDS Engine as a capability to UDS Core and also have a `uds dev` command to install Engine. The use case
for having a UDS command to install Engine would probably be for dev work. Having the functionality as part
of a `uds dev` command covers that need.

<b>Pros:</b>
- Covers the pros of alternatives 1 and 2 while potentially eliminating the cons

<b>Cons:</b>
- More work having to maintain two different ways of installing Engine

### 4. Solo Package
We create and maintain a UDS Engine Zarf package and allow users to install the package as they wish. Using Zarf or UDS

<b>Pros:</b>
- Least amount of work from a product engineer perspective
- Allows users flexibility on how they want to install it

<b>Cons:</b>
- More work for users to determine and maintain how they want to install the UDS Engine Zarf package

## Decision

The change that we're proposing or have agreed to implement.


## Consequences

What becomes easier or more difficult to do and any risks introduced by the change that will need to be mitigated.
